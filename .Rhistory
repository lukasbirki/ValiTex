shiny::runApp()
library(DT)
runApp()
df <- readxl::read_xlsx("Framework.xlsx")
getwd()
df <- readxl::read_xlsx("Framework.xlsx")
View(df)
runApp()
runApp()
runApp()
ui <- fluidPage(
# App title ----
titlePanel("ValiTex Framework"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
source("C:/Users/birkenls/OneDrive - GESIS – Leibniz-Institut für Sozialwissenschaften e.V/Projekte Phd/1_Papers/Framework Paper Validity/Shiny App/app.R")
runApp()
runApp()
cars
pressure
rock
View(df)
runApp()
df <- readxl::read_xlsx("Framework.xlsx")
df <- readxl::read_xlsx("Framework.xlsx")
getwd()
df <- readxl::read_xlsx("Framework.xlsx")
library(readxl)
df <- read_excel("Framework.xlsx")
View(df)
runApp()
df <- readxl::read_excel("Framework.xlsx")
runApp()
runApp()
library(DT)
runApp()
install.packages("shinythemes")
runApp()
runApp()
df[["Select"]]
df[["Select"]] <- paste0('<input type="checkbox" name="row_selected" value=',1:nrow(df),' checked>')
df[["Select"]] <- paste0('<input type="checkbox" name="row_selected" value=',1:nrow(df),' checked>')
df |>
dplyr::select(Select, Phase, Dimension, `Validation Step`, Type, input$Method) %>%
dplyr::filter(!!sym(input$Method) != "n.a.") %>%
dplyr::rename(Status = input$Method)
runApp()
df |>
dplyr::select(Select, Phase, Dimension, `Validation Step`, Type, input$Method) %>%
dplyr::filter(!!sym(input$Method) != "n.a.") %>%
dplyr::rename(Status = input$Method) |>
mutate(Checkbox = sprintf('<input type="checkbox" name="row_%d"/>', 1:n()))
runApp()
shiny::runApp('C:/Users/birkenls/AppData/Local/Temp/7zO83D2B55B')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("writexl")
runApp()
df <- readxl::read_excel("data/Framework.xlsx")
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Checks") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
library(readxl)
library(writexl)
library(tidyverse)
library(DT)
library(shinythemes)
library(shinyjs)
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Checks") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
shiny::runApp()
df <- readxl::read_excel("data/Framework.xlsx")
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Robustness Checks") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Structural Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "External Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
install.packages("webshot")
webshot::install_phantomjs()
runApp()
View(df)
df <- readxl::read_excel("data/Framework.xlsx")
View(df)
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
names(df)
df <- readxl::read_excel("data/Framework.xlsx")
names(df)
runApp()
runApp()
write.csv(df, "file.csv")
runApp()
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Robustness Checks") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Mandatory", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Robustness Checks") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Phase") |> select(-Phase)
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "Substantive Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Performance Criteria
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling",
Performance Criteria,
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling",
Test = "Performance Criteria",
Dimension) %>%
filter(Phase == "Substantive Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling",
Test = "Performance Criteria",
Dimension) %>%
filter(Phase == "Structural Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling", Dimension) %>%
filter(Phase == "External Phase") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))
df %>%
dplyr::select(Phase, `Validation Step`, DI = Dictionary, SU = Supervised,US = "Unsupervised: Topic Model",UT = "Unsupervised: Text Scaling",
Test = "Performance Criteria",
Dimension) %>%
filter(Phase == "Continuous Evaluation: Robustness Checks") |> select(-Phase) |>
datatable(
rownames = FALSE,
escape = FALSE,
class = 'cell-border stripe',
options = list(
ordering = FALSE,
dom = 'rit',
order = list(list(1, 'asc')),
displayLength = nrow(df)
))  |>
formatStyle(
"DI",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) ) |>
formatStyle(
"SU",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")) )|>
formatStyle(
"US",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))|>
formatStyle(
"UT",
backgroundColor = styleEqual(c("Recommended", "Optional"), c("#f8d7da", "#d7ebf8")))
runApp()
df <- readxl::read_excel("data/Framework2.xlsx")
df <- readxl::read_excel("data/Framework_2.xlsx")
runApp()
shiny::runApp()
runApp()
